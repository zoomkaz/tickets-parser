import puppeteer from 'puppeteer';
import TelegramBot from 'node-telegram-bot-api';
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config();

const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN!;
const CHAT_ID = process.env.CHAT_ID!;

const START_DATE = new Date('2025-08-10');
const MAX_DAYS_TO_CHECK = 20;
const LOG_PATH = path.resolve(__dirname, '../logs.txt');
const LAST_FOUND_PATH = path.resolve(__dirname, '../last-found.txt');

const bot = new TelegramBot(TELEGRAM_TOKEN);

function formatDateForURL(date: Date): string {
  return date.toLocaleDateString('ru-RU').replace(/\./g, '.');
}

function formatDateForSearch(date: Date): string {
  const day = date.getDate().toString().padStart(2, '0');
  const monthsRod: string[] = [
    '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
    '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
  ];
  const month = monthsRod[date.getMonth()];
  const year = date.getFullYear();
  return `${day} ${month} ${year}`;
}



function readLastFoundDate(): string | null {
  try {
    return fs.readFileSync(LAST_FOUND_PATH, 'utf8').trim();
  } catch {
    return null;
  }
}

function writeLastFoundDate(dateStr: string) {
  fs.writeFileSync(LAST_FOUND_PATH, dateStr, 'utf8');
}

async function checkTickets(): Promise<void> {
  const startTime = new Date();
  console.log(`üîç [${startTime.toLocaleString()}] –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–µ—Ç–æ–≤...`);

  const browser = await puppeteer.launch({
    headless: 'new',
    args: ['--no-sandbox', '--disable-setuid-sandbox'],
  });
  const page = await browser.newPage();

  try {
    await page.goto('https://grandtrain.ru', { waitUntil: 'networkidle2' });
    await new Promise(resolve => setTimeout(resolve, 2000));

    for (let i = 0; i < MAX_DAYS_TO_CHECK; i++) {
      const currentDate = new Date(START_DATE.getTime());
      currentDate.setDate(currentDate.getDate() - i); // üîÅ –∏–¥—ë–º –Ω–∞–∑–∞–¥

      const urlDate = formatDateForURL(currentDate);
      const visibleDate = formatDateForSearch(currentDate);
      const url = `https://grandtrain.ru/tickets/2000000-2078750/${urlDate}/`;

      console.log(`‚û°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞: ${visibleDate} | URL: ${url}`);
      await page.goto(url, { waitUntil: 'networkidle2' });
      await new Promise(resolve => setTimeout(resolve, 3000));

      const pageContent = await page.content();

      fs.writeFileSync(LOG_PATH, pageContent, 'utf8');
      console.log(`üìù HTML-–∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –≤ logs.txt`);

      if (pageContent.includes(visibleDate) && pageContent.includes('–í—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–∞')) {
        const lastFound = readLastFoundDate();
        if (lastFound !== visibleDate) {
          writeLastFoundDate(visibleDate);
          console.log(`‚úÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞: ${visibleDate}, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...`);
          await bot.sendMessage(
            CHAT_ID,
            `üéü –ë–∏–ª–µ—Ç—ã –Ω–∞ –ø–æ–µ–∑–¥ –ú–æ—Å–∫–≤–∞ ‚Äî –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ ${visibleDate}:\n${url}`
          );
        } else {
          console.log(`üîÅ ${visibleDate} —É–∂–µ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ.`);
        }
        break;
      } else {
        console.log(`‚ùå –ë–∏–ª–µ—Ç–æ–≤ –Ω–∞ ${visibleDate} –ø–æ–∫–∞ –Ω–µ—Ç.`);
      }
    }

  } catch (error) {
    console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    await browser.close();
    const endTime = new Date();
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. (${endTime.toLocaleTimeString()})\n`);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
setInterval(checkTickets, 1000 * 60 * 10);
checkTickets(); // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
